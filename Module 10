# class Elevator:
#     def __init__(self,bottom, top):
#         self.top = top
#         self.bottom = bottom
#         self.current_floor = bottom
#     def go_to_floor(self, floor):
#         if floor < self.bottom or floor > self.top:
#             print("That floor doesn't exist.")
#         else:
#             while self.current_floor < floor:
#                 self.floor_up()
#             while self.current_floor > floor:
#                 self.floor_down()
#             print("Elevator has arrived at floor", self.current_floor)
#
#     def floor_up(self):
#         if self.current_floor < self.top:
#             self.current_floor += 1
#             print(f"We moved up to floor {self.current_floor}")
#
#
#     def floor_down(self):
#         if self.current_floor > self.bottom:
#             self.current_floor -= 1
#             print(f"We moved down to floor {self.current_floor}")
# h = Elevator(1,20)
# h.go_to_floor(15)
# while h.current_floor > h.bottom:
#     h.floor_down()

# class Elevator:
#     def __init__(self,bottom, top):
#         self.top = top
#         self.bottom = bottom
#         self.current_floor = bottom
#     def go_to_floor(self, floor):
#         if floor < self.bottom or floor > self.top:
#             print("That floor doesn't exist.")
#         else:
#             while self.current_floor < floor:
#                 self.floor_up()
#             while self.current_floor > floor:
#                 self.floor_down()
#             print("Elevator has arrived at floor", self.current_floor)
#
#     def floor_up(self):
#         if self.current_floor < self.top:
#             self.current_floor += 1
#             print(f"We moved up to floor {self.current_floor}")
#
#
#     def floor_down(self):
#         if self.current_floor > self.bottom:
#             self.current_floor -= 1
#             print(f"We moved down to floor {self.current_floor}")
#
# class Building:
#     def __init__(self, bottom, top, number_of_elevators):
#         self.bottom = bottom
#         self.top = top
#         self.number_of_elevators = number_of_elevators
#         self.elevators = []
#         for _ in range(number_of_elevators):
#             self.elevators.append(Elevator(bottom, top))
#
#     def run_elevator(self, elevator_number, destination_floor):
#         if 0 <= elevator_number < len(self.elevators):
#             self.elevators[elevator_number].go_to_floor(destination_floor)
#         else:
#             print("Invalid elevator number.")
# building = Building(1, 10, 2)
# building.run_elevator(0, 5)
# building.run_elevator(1, 1)

# class Elevator:
#     def __init__(self,bottom, top):
#         self.top = top
#         self.bottom = bottom
#         self.current_floor = bottom
#     def go_to_floor(self, floor):
#         if floor < self.bottom or floor > self.top:
#             print("That floor doesn't exist.")
#         else:
#             while self.current_floor < floor:
#                 self.floor_up()
#             while self.current_floor > floor:
#                 self.floor_down()
#             print("Elevator has arrived at floor", self.current_floor)
#
#     def floor_up(self):
#         if self.current_floor < self.top:
#             self.current_floor += 1
#             print(f"We moved up to floor {self.current_floor}")
#
#
#     def floor_down(self):
#         if self.current_floor > self.bottom:
#             self.current_floor -= 1
#             print(f"We moved down to floor {self.current_floor}")
#
# class Building:
#     def __init__(self, bottom, top, number_of_elevators):
#         self.bottom = bottom
#         self.top = top
#         self.number_of_elevators = number_of_elevators
#         self.elevators = []
#         for _ in range(number_of_elevators):
#             self.elevators.append(Elevator(bottom, top))
#
#     def run_elevator(self, elevator_number, destination_floor):
#         if 0 <= elevator_number < len(self.elevators):
#             self.elevators[elevator_number].go_to_floor(destination_floor)
#         else:
#             print("Invalid elevator number.")
#     def fire_alarm(self):
#         print("FIRE ALARM!")
#         for elevator in self.elevators:
#             elevator.go_to_floor(self.bottom)
# building = Building(1, 10, 2)
# building.fire_alarm()

import random
class Car:
    def __init__(self, registration_number, maximum_speed, current_speed=0, travelled_distance=0):
        self.registration_number = registration_number
        self.maximum_speed = maximum_speed
        self.current_speed = current_speed
        self.travelled_distance = travelled_distance

    def properties(self):
        print(f"The registration number is: {self.registration_number}, "
              f"the maximum speed is: {self.maximum_speed}, "
              f"the current speed is: {self.current_speed} and "
              f"the travelled distance is: {self.travelled_distance}")

    def accelerate(self, change_of_speed):
        self.current_speed += change_of_speed
        if self.current_speed > self.maximum_speed:
            self.current_speed = self.maximum_speed
        elif self.current_speed < 0:
            self.current_speed = 0

    def drive(self, number_of_hours):
        self.travelled_distance += self.current_speed * number_of_hours

class Race:
    def __init__(self, name, distance, cars):
        self.name = name
        self.distance = distance
        self.cars = cars

    def hour_passes(self):
        for car in self.cars:
            change = random.randint(-10, 15)
            car.accelerate(change)
            car.drive(1)

    def print_status(self):
        print("Race:", self.name)
        print("Car\tMaxSpeed\tSpeed\tDistance")
        for car in self.cars:
            print(f"{car.registration_number}\t{car.maximum_speed}\t\t{car.current_speed}\t{int(car.travelled_distance)}")
        print()

    def race_finished(self):
        for car in self.cars:
            if car.travelled_distance >= self.distance:
                return True
        return False

cars = []
for i in range(1, 11):
    max_speed = random.randint(100, 200)
    reg_number = f"ABC-{i}"
    car = Car(reg_number, max_speed)
    cars.append(car)

race = Race("Grand Demolition Derby", 8000, cars)

hours = 0
while not race.race_finished():
    race.hour_passes()
    hours += 1

    if hours % 10 == 0:
        race.print_status()

race.print_status()
print("Race finished after", hours, "hours!")
#I did half of this with AI, I tried without it but couldn't.







